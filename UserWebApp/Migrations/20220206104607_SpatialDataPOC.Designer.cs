// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using UserWebApp.Models;

namespace UserWebApp.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20220206104607_SpatialDataPOC")]
    partial class SpatialDataPOC
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserWebApp.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("UserWebApp.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("UserWebApp.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Polygon>("DeliveryAreaCoverage")
                        .HasColumnType("geography");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<bool>("IsWithinDistance")
                        .HasColumnType("bit");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            City = "Amman",
                            DeliveryAreaCoverage = (NetTopologySuite.Geometries.Polygon)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POLYGON ((35.944914401626164 32.05746209539408, 36.05840058444662 31.99578659548469, 36.06422038869383 31.904430696264882, 35.87798665278333 31.779595771940045, 35.75140591040666 31.805565454728104, 35.67720340625483 32.00565746582009, 35.944914401626164 32.05746209539408))"),
                            Distance = 0.0,
                            IsWithinDistance = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.9323535711242 31.95302249260005)"),
                            Name = "Al Quds"
                        },
                        new
                        {
                            RestaurantId = 2,
                            City = "Amman",
                            DeliveryAreaCoverage = (NetTopologySuite.Geometries.Polygon)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POLYGON ((35.944914401626164 32.05746209539408, 36.05840058444662 31.99578659548469, 36.06422038869383 31.904430696264882, 35.87798665278333 31.779595771940045, 35.75140591040666 31.805565454728104, 35.67720340625483 32.00565746582009, 35.944914401626164 32.05746209539408))"),
                            Distance = 0.0,
                            IsWithinDistance = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.95048433946144 31.974175313038348)"),
                            Name = "Hanini"
                        },
                        new
                        {
                            RestaurantId = 3,
                            City = "Amman",
                            DeliveryAreaCoverage = (NetTopologySuite.Geometries.Polygon)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POLYGON ((35.944914401626164 32.05746209539408, 36.05840058444662 31.99578659548469, 36.06422038869383 31.904430696264882, 35.87798665278333 31.779595771940045, 35.75140591040666 31.805565454728104, 35.67720340625483 32.00565746582009, 35.944914401626164 32.05746209539408))"),
                            Distance = 0.0,
                            IsWithinDistance = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.86016216507191 31.89156322955307)"),
                            Name = "Barcelona"
                        },
                        new
                        {
                            RestaurantId = 4,
                            City = "Amman",
                            DeliveryAreaCoverage = (NetTopologySuite.Geometries.Polygon)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POLYGON ((35.944914401626164 32.05746209539408, 36.05840058444662 31.99578659548469, 36.06422038869383 31.904430696264882, 35.87798665278333 31.779595771940045, 35.75140591040666 31.805565454728104, 35.67720340625483 32.00565746582009, 35.944914401626164 32.05746209539408))"),
                            Distance = 0.0,
                            IsWithinDistance = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.886529536501136 31.984122756596005)"),
                            Name = "Tazaj"
                        },
                        new
                        {
                            RestaurantId = 5,
                            City = "Amman",
                            DeliveryAreaCoverage = (NetTopologySuite.Geometries.Polygon)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POLYGON ((35.944914401626164 32.05746209539408, 36.05840058444662 31.99578659548469, 36.06422038869383 31.904430696264882, 35.87798665278333 31.779595771940045, 35.75140591040666 31.805565454728104, 35.67720340625483 32.00565746582009, 35.944914401626164 32.05746209539408))"),
                            Distance = 0.0,
                            IsWithinDistance = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.854908281588884 31.95462276640964)"),
                            Name = "KFC"
                        },
                        new
                        {
                            RestaurantId = 6,
                            City = "Aqaba",
                            DeliveryAreaCoverage = (NetTopologySuite.Geometries.Polygon)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POLYGON ((35.944914401626164 32.05746209539408, 36.05840058444662 31.99578659548469, 36.06422038869383 31.904430696264882, 35.87798665278333 31.779595771940045, 35.75140591040666 31.805565454728104, 35.67720340625483 32.00565746582009, 35.944914401626164 32.05746209539408))"),
                            Distance = 0.0,
                            IsWithinDistance = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.00316439395086 29.54277244939043)"),
                            Name = "SoYummy"
                        });
                });

            modelBuilder.Entity("UserWebApp.Models.Ride", b =>
                {
                    b.Property<int>("RideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DestinationLat")
                        .HasColumnType("float");

                    b.Property<double>("DestinationLng")
                        .HasColumnType("float");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<double>("OriginLat")
                        .HasColumnType("float");

                    b.Property<double>("OriginLng")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("RideId");

                    b.HasIndex("StudentId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("UserWebApp.Models.Streaming", b =>
                {
                    b.Property<int>("StreamingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StreamingId");

                    b.ToTable("Streams");
                });

            modelBuilder.Entity("UserWebApp.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGraduating")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MobilePhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("UserWebApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MobilePhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("UserWebApp.Models.Enrollment", b =>
                {
                    b.HasOne("UserWebApp.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UserWebApp.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UserWebApp.Models.Ride", b =>
                {
                    b.HasOne("UserWebApp.Models.Student", "Student")
                        .WithMany("Rides")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UserWebApp.Models.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("UserWebApp.Models.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
