@{
    Layout = "_Layout";
}

<div class="text-center">
    <h1 class="display-4" style="color: darksalmon">Hello World</h1>
    <p>A complete CRUD Asp.Net Core and Razor Pages Web Application for Managing Student Course Enrollment Records and APIs for Managing User Records</p>
    <div class="row">
        <div class="span6" style="float: none; margin: 0 auto;">
            <a asp-controller="Students" asp-action="Index" class="btn btn-outline-info">
                <i class="fas fa-user-graduate" style="padding: 0px;"></i>&nbsp;Students
            </a> &nbsp;&nbsp;
            <a asp-controller="Courses" asp-action="Index" class="btn btn-outline-warning">
                <i class="fas fa-book" style="padding: 0px;"></i>&nbsp;Courses
            </a> &nbsp;&nbsp;
            <a asp-controller="Enrollments" asp-action="Index" class="btn btn-outline-danger">
                <i class="fas fa-university" style="padding: 0px;"></i>&nbsp;Enrollments
            </a> &nbsp;&nbsp;
            <a asp-controller="Users" asp-action="Index" class="btn btn-outline-dark">
                <i class="fas fa-users" style="padding: 0px;"></i>&nbsp;Users
            </a> &nbsp;&nbsp;
            <a asp-action="Maps" class="btn btn-outline-success">
                <i class="fas fa-map" style="padding: 0px;"></i>&nbsp;Maps
            </a> &nbsp;&nbsp;
            <a asp-action="Client" class="btn btn-outline-primary">
                <i class="fab fa-node" style="padding: 0px;"></i>&nbsp;Web Socket
            </a> &nbsp;&nbsp;
        </div>
    </div>
</div>

<div class="container wrap">
    <div class="row">
        <div class="col-md-12">
            <div class="panel">
                <div class="panel-heading" id="accordion">
                    <i class="fas fa-comment-dotted"></i>Start Chat
                    <div class="btn-group pull-right">
                        <a type="button" class="btn btn-default btn-xs" data-toggle="collapse" data-parent="#accordion" href="#collapseOne">
                            <i class="fas fa-arrow-down"></i>
                        </a>
                    </div>
                </div>
                <div class="panel-collapse collapse" id="collapseOne">
                    <div class="panel-body">
                        <ul id="messageList" class="chat">
                        </ul>
                    </div>
                    <div class="panel-footer">
                        <div class="input-group">
                            <div class="row">
                                <div class="col-md-6">
                                    <input type="text" id="userMessage" class="form-control input-sm" placeholder="Input Message..." />
                                </div>
                                <div class="col-md-6">
                                    <input type="text" id="sendTo" class="form-control input-sm" placeholder="Send to..." />
                                </div>
                            </div>&nbsp;&nbsp;&nbsp;
                            <span class="input-group-btn">
                                <input type="button" value="Send" id="sendMessage" class="btn btn-info">
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<hr />
@*<div class="row">
        <div id="kendoGrid"></div>
    </div>*@

@section Scripts{
    <script>
        // build SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.start().catch(err => console.error(err.toString()));

        // to receive a message
        connection.on("ReceiveMessage", (user, message) => {
            const rec_msg = user + ": " + message;
            const li = document.createElement("li");
            li.textContent = rec_msg;
            document.getElementById("messageList").appendChild(li);
        });

        // to send a message
        document.getElementById("sendMessage").addEventListener("click", event => {
            const message = document.getElementById("userMessage").value;
            const sendTo = document.getElementById("sendTo").value;
            connection.invoke("SendMessage", sendTo, message).catch(err => console.error(err.toString()));
            event.preventDefault();
        });

        $(document).ready(function () {
            $("#kendoGrid").kendoGrid({
                dataSource: [
                    { CustomerID: "1", ContactName: "Imran", CompanyName: "ACACUS", Country: "Jordan" },
                    { CustomerID: "2", ContactName: "Bashar", CompanyName: "ACACUS", Country: "Jordan" },
                    { CustomerID: "3", ContactName: "Jarwan", CompanyName: "ACACUS", Country: "Jordan" },
                    { CustomerID: "4", ContactName: "Jamil", CompanyName: "ACACUS", Country: "Jordan" },
                    { CustomerID: "5", ContactName: "Bilal", CompanyName: "ACACUS", Country: "Jordan" },
                    { CustomerID: "6", ContactName: "Ayoub", CompanyName: "ACACUS", Country: "Jordan" },
                ],
                filterable: true,
                sortable: true,
                columns: customerHelper.generateColumns(),
                editable: false,
                navigatable: true,
                selectable: "row"
            });
        });

        var customerHelper = {
            generateColumns: function () {
                return columns = [
                    { field: "CustomerID", title: "ID", width: 40, editable: false },
                    { field: "ContactName", title: "Name", width: 60, editable: false },
                    { field: "CompanyName", title: "Company", width: 60, editable: false },
                    { field: "Country", title: "Country", width: 60, editable: false },
                ]
            },
            gridDataSource: function () {
                var gridData = new kendo.data.DataSource({
                    type: "json",
                    serverPaging: true,
                    serverSorting: true,
                    serverFiltering: true,
                    allowUnsort: true,
                    pageSize: 5,
                    transport: {
                        read: {
                            url: '../Customer/GetCustomer',
                            type: "GET",
                            dataType: "json",
                            contentType: "application/json; charset=utf-8"
                        },
                        parameterMap: function (options) {
                            return options;
                        }
                    },
                    schema: {
                        data: "Items", total: "TotalCount",
                        model: {
                            fields: {
                            }
                        },
                    }
                });
                return gridData;
            }
        }
    </script>
}